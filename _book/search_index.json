[["index.html", "Introduction to Theoretical Ecology Course information", " Introduction to Theoretical Ecology Instructor: Po-Ju Ke \\(~~~~~\\) Teaching Assistant: Sun Yi 2023 Fall at National Taiwan Univeristy Course information Description The development of theory plays an important role in advancing ecology as a scientific field. This three-unit course is for students at the graduate or advanced undergraduate level. The course will cover classic theoretical topics in population and community ecology, staring from single-species dynamics and gradually build up to multispecies models. Emphasis will be on theoretical concepts and corresponding mathematical approaches. This course is designed as a two-hour lecture (written on black board) followed by a one-hour complementary hands-on practice module. In the lecture, we will analyze dynamical models and discuss their theoretical implications. In the practice section, we will use a combination interactive applications and numerical simulations to gain more intuition of the dynamics and behavior of different models. Objective By the end of the course, students are expected to be familiar with the basic building blocks of ecological models, and would be able to formulate and analyze simple models of their own. The hands-on practice component should allow students to link their ecological intuition with the underlying mathematical model, helping them to better understand the primary literature of theoretical ecology. Requirement Students are only expected to have a basic understanding of Calculus (e.g., freshman introductory course) and Ecology. It’s OK if you’re not familiar with calculus as we will provide relevant material for you to review during the first week. Format Tuesday 6,7,8 (1:20 pm ~ 4:20 pm) at 共207 Grading The final grade consists of: Assignment problem sets (60%) Midterm exam (15%) Final exam (15%) Course participation (10%) Course materials We will use a combination of textbooks of theoretical ecology. Textbook chapters and additional reading materials (listed in the course outline) will be provided. (see Syllabus for more details). Below are the textbook references: A Primer of Ecology (4th edition). Nicholas Gotelli, 2008. An Illustrated Guide to Theoretical Ecology. Ted Case, 2000. A Biologist’s Guide to Mathematical Modeling in Ecology and Evolution. Sarah Otto &amp; Troy Day, 2011. Mathematical Ecology of Populations and Ecosystems. John Pastor, 2008. Nonlinear Dynamics and Choas. Steven Strogatz, 2000. Contacts Instructor: Po-Ju Ke Office: Life Science Building R635 Email: pojuke@ntu.edu.tw Office hours: by appointment Teaching assistant: Sun Yi Office: Life Science Building R635 Email: r11b44014@ntu.edu.tw Office hours: 14:00 ~ 15:00 on Thursday or by appointment "],["syllabus.html", "Syllabus", " Syllabus Date Lecture topic Lab Readings Week 1 9/5 Introduction: what is theoretical ecology? - Grainger et al., 2021 Week 2 9/12 Exponential population growth Solving exponential growth equation using “deSolve” &amp; Visualization Gotelli [Ch.1], Case[Ch.1] Week 3 9/19 Logistic population growth and stability analysis Shinny App for logistic population growth Gotelli [Ch.2], Case[Ch.5], Otto &amp; Day[Ch.5] Week 4 9/26 Metapopulations and patch occupancy models Alternative stable state diagram Gotelli [Ch.4], Case[Ch.16] Week 5 10/3 Harvesting and bifurcation Metapopulations and patch occupancy models Pastor [Ch. 7], Strogatz [Ch. 3] Week 6 10/10 No class (National holiday) - - Week 7 10/17 Age-structured population models Age-structured population model Gotelli [Ch.3], Case[Ch.3] Week 8 10/24 Lotka-Volterra model of competition: graphical analysis Lotka-Volterra competition model - Population dynamics Gotelli [Ch.5], Case[Ch.14] Week 9 10/31 Midterm exam - - Week 10 11/7 Lotka-Volterra model of competition: invasion analysis and linear stability analysis Lotka-Volterra competition model - Visualization of dynamics with complex eigenvalues Otto &amp; Day [Ch.8], Broekman et al., 2019 Week 11 11/14 Predator-prey interactions (I) Lotka-Volterra model of predator-prey interactions and time-scale separation Gotelli [Ch.6], Case[Ch.12, 13] Week 12 11/21 Predator-prey interactions (II) + Discussion on May (1972) Rosenzweig-MacArthur predator-prey model and May’s complexity-stability relationship Gotelli [Ch.6], Case[Ch.12, 13], May., 1972 Week 13 11/28 Mechanistic models for consumer-resource dynamics Parameter space for apparent competition model Tilman., 1980, Armstrong &amp; McGehee., 1980 Week 14 12/5 Multispecies models of predation: apparent competition Resource competition Holt., 1977 Week 15 12/12 Research applcations: plant-soil feedback as an example - - Week 16 12/19 Final exam - - "],["week-2---exponential-population-growth.html", "Week 2 - Exponential population growth", " Week 2 - Exponential population growth In part 1, we will solve the differential equation for exponential population growth and visualize how the population sizes change over time. Part 1 - Numerical solution using the package deSolve Two main phases: Model specification: specify the structure of differential equation model Model application: set the time steps, initial population size and model parameters (e.g., intrinsic population growth rate \\(r\\)), and then solve the equation model p span#aaa:before { content: \"(1) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } p span#bbb:before { content: \"(2) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } d-article table.lightable-paper { margin-bottom: 0px; } Consider the model \\[ \\frac{dN}{dt} = rN \\] where \\(N\\) is population size and \\(r\\) is the intrinsic growth rate. ###### part 1 ###### # install.packages(&quot;deSolve&quot;) library(deSolve) ### (1) Model specification exponential_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N # Exponential growth equation return(list(c(dN_dt))) # Return the results }) } Set the time steps, initial population size and model parameters. ### (2) Model application times &lt;- seq(0, 10, by = 0.1) # Time steps to integrate over state &lt;- c(N = 10) # Initial population size parms &lt;- c(r = 1.5) # Intrinsic growth rate Solve the equation by ode() numerically. # Run the ode solver pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # Take a look at the results head(pop_size) ## time N ## [1,] 0.0 10.00000 ## [2,] 0.1 11.61834 ## [3,] 0.2 13.49860 ## [4,] 0.3 15.68313 ## [5,] 0.4 18.22120 ## [6,] 0.5 21.17002 Visualization plot(N ~ time, data = pop_size) Compare simulation result with analytic solution, which is \\[ N(t) = N_0\\exp\\{rt\\} \\] par(mfrow = c(1,2)) plot(N ~ time, data = pop_size) # Plot simulation data curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # Adding analytic solution plot(N ~ time, data = pop_size, log = &quot;y&quot;) # Plot logged simulation data curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # Adding analytic solution Part 2 - Comparing different ode solvers and different time intervals In default of ode(), the equations are solved by LSODA method. We can change the method by modifying the argument method in ode(). ###### part 2 ###### # Original setting times &lt;- seq(0, 10, by = 0.1) # Time steps to integrate over state &lt;- c(N = 10) # Initial population size parms &lt;- c(r = 1.5) # Intrinsic growth rate # Default: LSODA pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # Euler&#39;s method pop_size_1 &lt;- ode(func = exponential_model, times = times, y = state, parms = parms, method = &quot;euler&quot;) # Compare different method par(mfrow = c(1,2)) plot(N ~ time, data = pop_size, main = &quot;LSODA&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_1, main = &quot;Euler&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve # Different time intervals times_1 &lt;- seq(0, 10, by = 1) # time steps to integrate over times_2 &lt;- seq(0, 10, by = 0.1) # time steps to integrate over times_3 &lt;- seq(0, 10, by = 0.01) # time steps to integrate over # Euler&#39;s method pop_size_1 &lt;- ode(func = exponential_model, times = times_1, y = state, parms = parms, method = &quot;euler&quot;) pop_size_2 &lt;- ode(func = exponential_model, times = times_2, y = state, parms = parms, method = &quot;euler&quot;) pop_size_3 &lt;- ode(func = exponential_model, times = times_3, y = state, parms = parms, method = &quot;euler&quot;) # Compare different time intervals par(mfrow = c(1,3)) plot(N ~ time, data = pop_size_1, main = &quot;Time intervals = 1&quot;) curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_2, main = &quot;Time intervals = 0.1&quot;) curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_3, main = &quot;Time intervals = 0.01&quot;) curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # correct curve Part 3 - Solving exponential growth model with fluctuating growth rate Consider the model \\[ \\frac{dN}{dt} = r(t)N \\ \\text{, } r(t) = \\overline{r} + \\sigma\\sin(\\omega t) \\] where \\(\\overline{r}\\) and \\(\\omega\\) are constants. The analytic solution of the ode model is \\[ N(t) = N_0\\exp\\{\\overline{r}t - \\frac{\\sigma}{\\omega}[\\cos(\\omega t) - 1]\\} \\] ###### part 3 ###### ### Model specification exponential_model_fluc &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = (r_bar + sigma*sin(omega*times))*N # exponential growth equation return(list(c(dN_dt))) # return the results }) } ### Parameters times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r_bar = 1.5, sigma = 5, omega = 2*pi) # intrinsic growth rate Plot \\(r(t)\\) ### Fluctuating growth rate r = parms[1] + parms[2]*sin(parms[3]*times) plot(r ~ times, type = &quot;l&quot;) ### Solving model pop_size &lt;- ode(func = exponential_model_fluc, times = times, y = state, parms = parms) ### Plotting plot(N ~ times, data = pop_size) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T, col = &quot;red&quot;) # correct curve plot(N ~ times, data = pop_size, log = &quot;y&quot;) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T, col = &quot;red&quot;) # correct curve Adjust \\(\\overline{r}\\) ### Parameters times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r_bar = 0.1, sigma = 5, omega = 2*pi) # intrinsic growth rate ### Fluctuating growth rate r = parms[1] + parms[2]*sin(parms[3]*times) plot(r ~ times, type = &quot;l&quot;) ### Solving model pop_size &lt;- ode(func = exponential_model_fluc, times = times, y = state, parms = parms) ### Plotting plot(N ~ times, data = pop_size) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T, col = &quot;red&quot;) # correct curve "],["week-3---logistic-population-growth-and-stability-analysis.html", "Week 3 - Logistic population growth and stability analysis", " Week 3 - Logistic population growth and stability analysis Credit to Gen-Chang Hsu Extra materials - Modeling discrete logistic models using for loops Model: \\[ N_{t+1} = N_t(1+r(1-\\frac{N_t}{K})) \\] ### (1) Define the discrete logistic growth equation log_fun &lt;- function(r, N, K){N + r*N*(1-N/K)} You may modify \\(r\\) to see the change in stability of equilibrium \\(K\\). ### (2) Set the parameters r &lt;- 1.8 K &lt;- 500 N0 &lt;- 10 time &lt;- 100 ### (3) Use for loop to iterate over the time sequence pop_size &lt;- data.frame(times = 1:time) pop_size$N[1] &lt;- N0 head(pop_size) ## times N ## 1 1 10 ## 2 2 10 ## 3 3 10 ## 4 4 10 ## 5 5 10 ## 6 6 10 for(i in 2:time){ pop_size$N[i] &lt;- log_fun(r = r, N = pop_size$N[i - 1], K = K) } head(pop_size) ## times N ## 1 1 10.00000 ## 2 2 27.64000 ## 3 3 74.64171 ## 4 4 188.93980 ## 5 5 400.51775 ## 6 6 543.95762 ### (4) Population trajectory plot(N ~ times, data = pop_size, type = &quot;l&quot;) abline(h = K, col = &quot;red&quot;) points(N ~ times, data = pop_size) Here is a shiny app for the discrete logistic growth model. Credit to Gen-Chang Hsu "],["week-4---metapopulations-and-patch-occupancy-models.html", "Week 4 - Metapopulations and patch occupancy models", " Week 4 - Metapopulations and patch occupancy models     Plants can condition nearby soil microbial communities, which will in turn influence the performance of subsequent colonizing plants. The soil beneath plant communities are therefore a mosaic with different cultivation histories. Po-Ju wants to understand how plant demographic rates (i.e., colonization and mortality rate) and microbial dynamics (i.e., the conditioning and decay rate of microbial communities) affect the percentage of different soil types in natural forests. As a starting point, Po-Ju builds a one-species patch occupancy model to track the dynamics of different types of plant-soil combination.     In this model, he characterizes sites by their plant-soil microbe state, using the notation \\(P_{ij}\\) to indicate sites that are now occupied by plant species \\(i\\) but have soil microbes state \\(j\\). Here, as a single species model, \\(i\\) can be 0 or \\(A\\), representing uncolonized sites or sites colonized by plant \\(A\\), respectively. Similarly, \\(j\\) can be 0 or \\(A\\), indicating sites without recent plant conditioning history or sites conditioned by plant \\(A\\), respectively. In summary: \\(P_{00}\\) represents uncolonized and unconditioned sites \\(P_{A0}\\) represents cites colonized by plant \\(A\\) but the soil is yet to be conditioned \\(P_{AA}\\) represents plant \\(A\\) colonizing a site with plant-\\(A\\)-specific microbial community \\(P_{0A}\\) represents sites that are currently unoccupied but have soil microbes that were associated with plant \\(A\\) At the landscape scale, \\(P_{ij}\\) represents the proportion of sites belonging to a particular plant-soil microbe state, and its dynamics, \\(\\frac {dP_{ij}}{dt}\\), summarizes the processes of plant colonization and death. The transitions between different plant-soil microbe states can be described by the following figure. Here, \\(P_{00}\\) can be colonized by plant \\(A\\) when propagules arrive (per capita rate \\(r_{A}\\)), transitioning the state from \\(P_{00}\\) to \\(P_{A0}\\). Plants may die, with rate \\(m_{A}\\), before conditioning the soil (i.e., transition from \\(P_{A0}\\) back to \\(P_{00}\\)), or may successfully condition the soil with rate \\(c_{A}\\) (i.e., transition from \\(P_{A0}\\) to \\(P_{AA}\\)). After plants within the state \\(P_{AA}\\) die, a site with microbial legacy is left behind, denoted as \\(P_{0A}\\). These empty sites can be recolonized (i.e., transition from \\(P_{0A}\\) back to \\(P_{AA}\\)) with rates affected by the microbial legacy effect, \\(\\alpha\\). Finally, the microbial community within the soil may decay to unconditioned state with rate \\(d_{A}\\), transitioning the state from \\(P_{0A}\\) to \\(P_{00}\\).     In this lab, we are going to model the dynamics of this plant-soil system. We will start by converting the flow diagram into a set of differential equations and then solve them numerically using the package deSolve. library(deSolve) library(ggplot2) library(tidyr) ### Model specification PSF &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dP00_dt = P0A*dA + PA0*mA - P00*(PA0 + PAA)*rA dPA0_dt = P00*(PA0 + PAA)*rA - PA0*mA - PA0*cA dPAA_dt = PA0*cA - PAA*mA + P0A*(PA0 + PAA)*rA*alpha dP0A_dt = PAA*mA - P0A*(PA0 + PAA)*rA*alpha - P0A*dA return(list(c(dP00_dt, dPA0_dt, dPAA_dt, dP0A_dt))) }) } ### Model parameters times &lt;- seq(0, 20, by = 0.1) state &lt;- c(P00 = 0.25, PA0 = 0.25, PAA = 0.25, P0A = 0.25) parms &lt;- c(rA = 0.5, mA = 0.1, cA = 0.5, dA = 0.4, alpha = 0.7) ### ODE solver pop_size &lt;- ode(func = PSF, times = times, y = state, parms = parms) # take a look at the results head(pop_size) ## time P00 PA0 PAA P0A ## [1,] 0.0 0.2500000 0.2500000 0.2500000 0.2500000 ## [2,] 0.1 0.2558649 0.2416153 0.2640144 0.2385055 ## [3,] 0.2 0.2609930 0.2339241 0.2773399 0.2277430 ## [4,] 0.3 0.2654349 0.2268709 0.2900255 0.2176687 ## [5,] 0.4 0.2692386 0.2204039 0.3021162 0.2082413 ## [6,] 0.5 0.2724484 0.2144756 0.3136533 0.1994227 tail(pop_size) ## time P00 PA0 PAA P0A ## [196,] 19.5 0.1283001 0.08252532 0.6866677 0.1025070 ## [197,] 19.6 0.1282914 0.08250852 0.6866865 0.1025136 ## [198,] 19.7 0.1282832 0.08249240 0.6867045 0.1025199 ## [199,] 19.8 0.1282754 0.08247693 0.6867217 0.1025260 ## [200,] 19.9 0.1282679 0.08246208 0.6867382 0.1025319 ## [201,] 20.0 0.1282608 0.08244784 0.6867539 0.1025375 ### Visualization I pop_size %&gt;% as.data.frame() %&gt;% gather(key = &quot;patch&quot;, value = &quot;proportion&quot;, -time) %&gt;% ggplot(aes(x = time, y = proportion, color = patch)) + geom_line(size = 1.5) ### Visualization II plot(range(times), c(0,1), type = &quot;n&quot;, xlab = &quot;time&quot;, ylab = &quot;proportion&quot;) lines(P00 ~ time, data = pop_size, col = &quot;tomato&quot;) lines(P0A ~ time, data = pop_size, col = &quot;navy&quot;) lines(PA0 ~ time, data = pop_size, col = &quot;gray&quot;) lines(PAA ~ time, data = pop_size, col = &quot;orange&quot;) legend(&quot;topleft&quot;, legend = c(&quot;P00&quot;, &quot;P0A&quot;, &quot;PA0&quot;, &quot;PAA&quot;), col = c(&quot;tomato&quot;, &quot;navy&quot;, &quot;gray&quot;, &quot;orange&quot;), lty = 1) "],["week-5---harvesting-and-bifurcation.html", "Week 5 - Harvesting and bifurcation", " Week 5 - Harvesting and bifurcation In this lab section, we’re going to analyze the budworm population dynamic model from Ludwig et al., 1978. Part 1 - Stability of the budworm model In part 1 we’re going to visualize the stability of the budworm model, by plotting the differential equation. We will plot the the differential equation with different initial, which we will see that the number and stability of equilibrium changes when parameter changes. \\[ \\dfrac{dN}{dt} = rN(1 - \\dfrac{N}{K}) - \\dfrac{HN^2}{A^2 + N^2} \\] #### Plotting the functional form for different parameters #### Parameter setting r &lt;- 0.055; K &lt;- 10; H &lt;- 0.1; A &lt;- 1 #### Visualize the whole dN/dt with different H N.vec &lt;- seq(from = 0, to = 10, length = 500) H.breaks &lt;- c(0.05, 0.12, 0.20) dat &lt;- outer(X = N.vec, Y = H.breaks, function(N, H){r * N * (1 - N / K) - (H * N^2 / (A^2 + N^2))}) matplot(x = N.vec, y = dat, type = &quot;l&quot;, xlab = &quot;N&quot;, ylab = &quot;dN/dt&quot;, col = &quot;blue&quot;, lwd = 2, las = 1) abline(h = 0) legend(&quot;bottomleft&quot;, legend = H.breaks, title = &quot;H&quot;, col = &quot;blue&quot;, lty=1:3, lwd = 2) Second, we’re going to plot \\(harvest\\) rate against \\(N\\) with separate components of \\(dN/dt\\), which the blue line is \\[ \\dfrac{HN}{A^2 + N^2} \\] with different \\(H\\), the red line is, \\[ r(1 - \\dfrac{N}{K}) \\] and the points that blue line and red line crosses are the equilibrium points. #### Visualize separate components of dN/dt with different H N.vec &lt;- seq(from = 0, to = 10, length = 500) H.breaks &lt;- c(0.05, 0.12, 0.20) dat.growth &lt;- outer(X = N.vec, Y = H.breaks, function(N, H){H * N / (A^2 + N^2)}) # Note notation change matplot(x = N.vec, y = dat.growth, type = &quot;l&quot;, ylim = c(0, 0.10), las = 1, xlab = &quot;N&quot;, ylab = &quot;harvest rate&quot;, col = &quot;blue&quot;, lwd = 2) curve(r * (1 - x/K), add = T, col = &quot;red&quot;, lwd = 2) # Just curve since its the same line, and note variable notation change abline(h = 0) legend(&quot;topright&quot;, legend = H.breaks, title = &quot;H&quot;, col = &quot;blue&quot;, lty=1:3, lwd = 2) Part 2 - Use rootSolve function gradient and uniroot.all, to solve stability of budworm model #### Stability of the budworm model, as a function of its parameters #### Using &quot;rootSolve&quot; function &quot;gradient&quot; and &quot;uniroot.all&quot; #### Works best for simple models and those with known solutions ######################################################################################################################## library(rootSolve) #### Parameter setting r &lt;- 0.055; K &lt;- 10; H &lt;- 0.1; A &lt;- 1 #### Spruce budworm model for rootSolve Budworm &lt;- function(N, H = 0.1){ r * N * (1 - N / K) - (H * N^2 / (A^2 + N^2)) } #### Function of root stability Stability &lt;- function(H.value = 0.1){ equilibrium &lt;- uniroot.all(f = Budworm, interval = c(0, K), H = H.value) # finds all roots lambda &lt;- vector(mode = &quot;numeric&quot;, length = length(equilibrium)) for(i in 1:length(equilibrium)){ lambda[i] &lt;- sign(gradient(f = Budworm, x = equilibrium[i], H = H.value)) } return(list(Equilibrium = equilibrium, Lambda = lambda)) } #### Bifurcation diagram for H H.vec &lt;- seq(0.001, 0.3, by = 0.0001) ## Create plotting frame plot(0, xlim = range(H.vec), ylim = c(0, 10), type = &quot;n&quot;, las = 1, xlab = &quot;H&quot;, ylab = &quot;Equilibrium density, N*&quot;, main = &quot;Budworm model bifurcation along H&quot;) legend(&quot;topright&quot;, pch = 15, pt.cex = 2, c(&quot;stable&quot;, &quot;unstable&quot;), col = c(&quot;darkblue&quot;, &quot;lightblue&quot;)) ## Calculate number of roots and stability across range of H for(H in H.vec){ temp &lt;- Stability(H.value = H) points(x = rep(H, length(temp$Equilibrium)), y = temp$Equilibrium, pch = 15, col = ifelse(temp$Lambda == -1, &quot;darkblue&quot;, &quot;lightblue&quot;)) } Take a look a this website if you’re interested in more details of bifurcation. Extra materials Using deSolve function ode to brute-force stable solution Here we’re going to use deSolve to solve the budworm model, #### Budworm model for deSolve BudwormODE &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r * N * (1 - N / K) - (H * N^2 / (A^2 + N^2)) return(list(c(dN_dt))) }) } ### Parameters setting times &lt;- seq(0, 5000, by = 100) state &lt;- c(N = 10) #### Bifurcation diagram for H -- the forward branch ### Set first forward simulation and saving space H.vec.forward &lt;- seq(0.001, 0.3, by = 0.001) parms &lt;- c(H = H.vec.forward[1], K = 10, r = 0.055, A = 1) temp &lt;- deSolve::ode(func = BudwormODE, times = times, y = state, parms = parms) forward &lt;- matrix(rep(unname(c(H.vec.forward[1], temp[length(times), 2])), length(H.vec.forward)), nrow = length(H.vec.forward), ncol = 2, byrow = T) ## Run across forward vector, using previous step equilibrium as new initial state for(i in 2:length(H.vec.forward)){ state &lt;- c(N = forward[i-1, 2]) parms &lt;- c(H = H.vec.forward[i], K = 10, r = 0.055, A = 1) temp &lt;- deSolve::ode(func = BudwormODE, times = times, y = state, parms = parms) forward[i, ] = unname(c(H.vec.forward[i], temp[length(times), 2])) } #### Bifurcation diagram for H -- the backward branch ## Set first backward simulation and saving space H.vec.backward &lt;- rev(H.vec.forward) parms &lt;- c(H = H.vec.backward[1], K = 10, r = 0.055, A = 1) temp &lt;- deSolve::ode(func = BudwormODE, times = times, y = state, parms = parms) backward &lt;- matrix(rep(unname(c(H.vec.backward[1], temp[length(times), 2])), length(H.vec.backward)), nrow = length(H.vec.backward), ncol = 2, byrow = T) ## Run across backward vector, using previous step equilibrium as new initial state for(i in 2:length(H.vec.backward)){ state &lt;- c(N = backward[i-1, 2] + 0.001) #Remember to add a small perturbation on initial parms &lt;- c(H = H.vec.backward[i], K = 10, r = 0.055, A = 1) temp &lt;- deSolve::ode(func = BudwormODE, times = times, y = state, parms = parms) backward[i, ] = unname(c(H.vec.backward[i], temp[length(times), 2])) } #### Plot both forward and backward branch plot(forward[, 1], forward[, 2], xlim = range(H.vec.forward), ylim = c(0, 10), las = 1, pch = 1, col = &quot;darkblue&quot;, cex = 1.6, xlab = &quot;H&quot;, ylab = &quot;Equilibrium density, N*&quot;, main = &quot;Budworm model bifurcation along H&quot;) points(backward[, 1], backward[, 2], pch = 16, col = &quot;lightblue&quot;) legend(&quot;topright&quot;, pch = c(1, 16), pt.cex = 1.5, c(&quot;forward&quot;, &quot;backward&quot;), col = c(&quot;darkblue&quot;, &quot;lightblue&quot;)) "],["week-6---national-holiday-no-class.html", "Week 6 - National holiday (No class)", " Week 6 - National holiday (No class) "],["week-7---age-structure-population-model.html", "Week 7 - Age-structure population model", " Week 7 - Age-structure population model In this lab section, we will analyze a Leslie matrix using for loops and matrix algebra, compare the results with those obtained via eigen-analysis, and visualize the population dynamics and age distribution. Part 1 - Visualizing stable age distribution For any diagonalizable n-by-n matrix \\(M\\) with only one dominant eigenvalue, and for any n-by-1 vector \\(v\\), \\(M^tv\\) will shift to the same direction with the eigenvector of \\(M\\) corresponding to the dominant eigenvalue when \\(t\\) is large. Here, we visualize this fact numerically. library(ggplot2) Time = 6 A = matrix(c(1, 1, 0.5, 0), 2, 2, byrow=T) N = matrix(0, Time, 2) N[1, ] = c(1, 1) for(i in 2:Time){ N[i, ] = A %*% N[i-1, ] } Data = as.data.frame(N) Data$Time = rep(1:Time) Data$V1.start = 0 Data$V2.start = 0 ggplot(Data, aes(x=V1, y=V2, col=as.factor(Time))) + geom_point() + geom_segment(aes(x=V1.start, y=V2.start, xend=V1, yend=V2), arrow=arrow(type=&quot;closed&quot;, length=unit(0.4,&quot;cm&quot;))) + geom_text(aes(x=V1+0.1, y=V2+0.1, label=Time)) + scale_color_brewer(&quot;Time&quot;, type=&quot;qual&quot;, palette=2) + labs(x=&quot;Age 1&quot;, y=&quot;Age 2&quot;) + theme_classic() Part 2 - Analyzing Leslie matrix Consider an age-strutured population model \\[ n_{t} = L^tn_0 \\] where \\(L\\) is a Leslie matrix and \\(n_t = (n_{1,t}, n_{2,t}, n_{3,t})\\) is the population sizes with three different ages in time \\(t\\). ### Leslie matrix and initial age classes leslie &lt;- matrix(data = c(0, 1, 5, 0.5, 0, 0, 0, 0.3, 0), nrow = 3, ncol = 3, byrow = T) N0 &lt;- c(10, 0, 0) ### for loop and matrix algebra time &lt;- 50 pop_size &lt;- data.frame(Age1 = 0, Age2 = 0, Age3 = 0) pop_size[1, ] &lt;- N0 for (i in 2:time) { # Matrix multiplication pop_size[i, ] &lt;- leslie %*% t(pop_size[i-1, ]) } # Total abundance pop_size$N &lt;- rowSums(pop_size) head(pop_size) ## Age1 Age2 Age3 N ## 1 10.0 0.00 0.000 10.000 ## 2 0.0 5.00 0.000 5.000 ## 3 5.0 0.00 1.500 6.500 ## 4 7.5 2.50 0.000 10.000 ## 5 2.5 3.75 0.750 7.000 ## 6 7.5 1.25 1.125 9.875 plot(c(1,time), c(0,265), type = &quot;n&quot;, xlab = &quot;time&quot;, ylab = &quot;pop_size&quot;) lines(1:time , pop_size$Age1, col = &quot;red&quot;) lines(1:time , pop_size$Age2, col = &quot;blue&quot;) lines(1:time , pop_size$Age3, col = &quot;green&quot;) legend(&quot;topleft&quot;, legend = c(&quot;Age1&quot;, &quot;Age2&quot;, &quot;Age3&quot;), col = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), lty = 1) By the derivation in the class, the asymptotic population sizes can be approximated by \\[ n_t \\approx c\\cdot \\lambda_1^t\\cdot u_1 \\] where \\(c\\) is a constant, \\(\\lambda_1\\) is the dominant eigenvalue and \\(u_1\\) is the corresponding eigenvector. Hence, with the long-term dynamics, the population grows at a rate \\(\\lambda_1\\) and with the age distribution \\(u_1\\). Here, we check this fact numerically. ### Asymptotic growth rate and stable age distribution asymptotic_growth &lt;- pop_size$N[time]/pop_size$N[time-1] asymptotic_growth ## [1] 1.089992 age_distribution &lt;- pop_size[time, 1:3]/sum(pop_size[time, 1:3]) age_distribution ## Age1 Age2 Age3 ## 50 0.6309262 0.2894167 0.07965713 ### Eigen-analysis of the Leslie matrix EIGEN &lt;- eigen(leslie) EIGEN ## eigen() decomposition ## $values ## [1] 1.0899905+0.0000000i -0.5449953+0.6253475i -0.5449953-0.6253475i ## ## $vectors ## [,1] [,2] [,3] ## [1,] 0.9030054+0i 0.8418972+0.0000000i 0.8418972+0.0000000i ## [2,] 0.4142263+0i -0.3334136-0.3825709i -0.3334136+0.3825709i ## [3,] 0.1140082+0i -0.0250833+0.1818099i -0.0250833-0.1818099i abs(EIGEN$values[1]) # dominant eigenvalue ## [1] 1.089991 as.numeric(EIGEN$vectors[, 1] / sum(EIGEN$vectors[, 1])) # corresponding eigenvector ## [1] 0.63092527 0.28941777 0.07965696 The asymptotic growth rate and stable age distribution obtained from for loops and eigen-analysis are similar. Part 3 - In-class exercise: Analyzing population matrix of common teasel Common teasel (Dipsacus sylvestris) is a herbaceous plant commonly found in abandoned fields and meadows in North America. It has a complex life cycle consisting of various stages. The seeds may lie dormant for one or two years. Seeds that germinate form small rosettes, which will gradually transit into medium and eventually large rosettes. These rosettes (all three sizes) may remain in the same stage for years before entering the next stage. After undergoing vernalization, large (and a few medium) rosettes will form stalks and flower in the upcoming summer, set seeds once, and die. Occasionally, the flowering plants will produce seeds that directly germinate into small/medium/large rosettes without entering dormancy. Here is a transition diagram for the teasel. Please convert this diagram into a stage-based transition matrix (Lefkovitch matrix) and derive the asymptotic growth rate \\(\\lambda\\) in R. Part 4 - COM(P)ADRE: A global database of population matrices COM(P)ADRE is an online repository containing matrix population models on hundreds of plants, animals, algae, fungi, bacteria, and viruses around the world, as well as their associated metadata. Take a look at the website: You will be exploring the population dynamics of a species (of your choice) in your assignment! "],["week-8---lotka-volterra-competition-model---population-dynamics.html", "Week 8 - Lotka-Volterra competition model - Population dynamics", " Week 8 - Lotka-Volterra competition model - Population dynamics In this lab, we are going to analyze the two-species Lotka-Volterra competition model numerically and visualize the population dynamics under different parameter settings. library(ggplot2) library(tidyverse) library(deSolve) LV_model &lt;- function(r1 = 1.4, r2 = 1.2, a11 = 1/200, a21 = 1/400, a22 = 1/200, a12 = 1/300, N1_0 = 10, N2_0 = 10) { ### Model specification LV &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN1_dt = N1 * (r1 - a11*N1 - a12*N2) dN2_dt = N2 * (r2 - a22*N2 - a21*N1) return(list(c(dN1_dt, dN2_dt))) }) } ### Model parameters times &lt;- seq(0, 100, by = 0.1) state &lt;- c(N1 = N1_0, N2 = N2_0) parms &lt;- c(r1 = r1, r2 = r2, a11 = a11, a21 = a21, a22 = a22, a12 = a12) ### Model application pop_size &lt;- ode(func = LV, times = times, y = state, parms = parms) ### Visualize the population dynamics pop_size %&gt;% as.data.frame() %&gt;% gather(key = &quot;Species&quot;, value = &quot;pop_size&quot;, -time) %&gt;% ggplot(aes(x = time, y = pop_size, color = Species)) + geom_line(size = 1.5) + theme_bw() } ### Different parameter settings ## N1_0 = 200 and N2_0 = 5 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/200, a21 = 1/100, a22 = 1/100, a12 = 1/200, N1_0 = 200, N2_0 = 5) # N1 wins ## N1_0 = 5 and N2_0 = 200 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/200, a21 = 1/100, a22 = 1/100, a12 = 1/200, N1_0 = 10, N2_0 = 200) # N1 wins ## N1_0 = 200 and N2_0 = 5 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/100, a21 = 1/200, a22 = 1/200, a12 = 1/100, N1_0 = 200, N2_0 = 5) # N2 wins ## N1_0 = 5 and N2_0 = 200 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/100, a21 = 1/200, a22 = 1/200, a12 = 1/100, N1_0 = 5, N2_0 = 200) # N2 wins ## N1_0 = 200 and N2_0 = 5 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/100, a21 = 1/200, a22 = 1/100, a12 = 1/300, N1_0 = 200, N2_0 = 5) # stable coexistence ## N1_0 = 5 and N2_0 = 200 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/100, a21 = 1/200, a22 = 1/100, a12 = 1/300, N1_0 = 5, N2_0 = 200) # stable coexistence ## N1_0 = 200 and N2_0 = 150 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/200, a21 = 1/100, a22 = 1/200, a12 = 1/100, N1_0 = 200, N2_0 = 150) # priority effect (N1 wins) ## N1_0 = 150 and N2_0 = 200 LV_model(r1 = 1.2, r2 = 1.2, a11 = 1/200, a21 = 1/100, a22 = 1/200, a12 = 1/100, N1_0 = 150, N2_0 = 200) # priority effect (N2 wins) #### phase diagram phase_plane &lt;- function(r1, r2, a11, a21, a22, a12, title, t){ ### Vectors LV &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN1_dt = N1 * (r1 - a11*N1 - a12*N2) dN2_dt = N2 * (r2 - a22*N2 - a21*N1) return(list(c(dN1_dt, dN2_dt))) }) } times &lt;- c(0, t) parms &lt;- c(r1 = r1, r2 = r2, a11 = a11, a21 = a21, a22 = a22, a12 = a12) x_inter&lt;- max(c(r1/a11, r2/a21)) y_inter &lt;- max(c(r2/a22, r1/a12)) # create position of arrows vector_grid &lt;- expand.grid(seq(5, x_inter, length.out = 10), seq(5, y_inter, length.out = 10)) vector_data &lt;- vector_grid %&gt;% pmap(., function(Var1, Var2){ state &lt;- c(N1 = Var1, N2 = Var2) pop_size &lt;- ode(func = LV, times = times, y = state, parms = parms) pop_size[2, 2:3] }) %&gt;% bind_rows() %&gt;% rename(xend = N1, yend = N2) %&gt;% bind_cols(vector_grid) %&gt;% rename(x = Var1, y = Var2) ### Phase plane ggplot() + geom_abline(slope = -a11/a12, intercept = r1/a12, color = &quot;#E41A1C&quot;, size = 1.5) + geom_abline(slope = -a21/a22, intercept = r2/a22, color = &quot;#377EB8&quot;, size = 1.5) + geom_segment(data = vector_data, aes(x = x, y = y, xend = xend, yend = yend), arrow = arrow(length = unit(0.1, &quot;cm&quot;))) + scale_x_continuous(name = &quot;N1&quot;, limits = c(0, x_inter), expand = c(0, 0)) + scale_y_continuous(name = &quot;N2&quot;, limits = c(0, y_inter), expand = c(0, 0)) + theme_bw(base_size = 13) + theme(panel.grid = element_blank(), plot.title = element_text(hjust = 0.5)) + labs(title = title) } phase_plane(r1 = 1.2, r2 = 1.2, a11 = 1/100, a21 = 1/200, a22 = 1/100, a12 = 1/300, t = 0.2, title = &quot;Stable coexistence&quot;) phase_plane(r1 = 1.2, r2 = 1.2, a11 = 1/200, a21 = 1/100, a22 = 1/200, a12 = 1/100, t = 0.2, title = &quot;Unstable coexistence (saddle)&quot;) "],["week-9---midterm.html", "Week 9 - Midterm", " Week 9 - Midterm "],["week-10---lotka-volterra-competition-model---visualization-of-dynamics-with-complex-eigenvalues.html", "Week 10 - Lotka-Volterra competition model - Visualization of dynamics with complex eigenvalues", " Week 10 - Lotka-Volterra competition model - Visualization of dynamics with complex eigenvalues In class, we learned that the stability of a nonlinear ODE can be characterized by studying the dynamics of the “displacement for the equilibrium” (\\(\\pmb\\varepsilon\\)), which follows a much simpler linear ODE. If the linear ODE describing the dynamics of the displacement have a stable equilibrium at zero, then this indicates that the original equilibrium of the nonlinear ODE will also be stable. Consider the case where the dynamics of displacements \\(\\pmb\\varepsilon\\) can be described by the following linear ODE: \\[ \\dfrac{d \\vec{\\pmb\\varepsilon}}{d t} = \\mathcal{J}\\vec{\\pmb\\varepsilon} \\] where \\(\\vec{\\pmb\\varepsilon} = (\\varepsilon_1, \\varepsilon_2)^T\\) and \\(\\mathcal{J} = \\begin{pmatrix} -1 &amp; 1\\\\ -2 &amp; -1 \\end{pmatrix}\\). Or, we can write the linear system by two ODEs: \\[\\begin{align*} \\dfrac{d \\varepsilon_1}{d t} &amp;= (-1)\\times \\varepsilon_1 + (1)\\times\\varepsilon_2\\\\ \\dfrac{d \\varepsilon_2}{d t} &amp;= (-2)\\times \\varepsilon_1 + (-1)\\times\\varepsilon_2\\\\ \\end{align*}\\] We can see that this ODE has an equilibrium at zero and the eigenvalues are as follows, which have negative real parts (indicating that it’ll be stable) with a non-zero imaginary part (indicating that it’ll rotate towards the equilibrium, as shown below). eigen(matrix(c( -1, 1, -2, -1), 2, 2, T))$values # eigenvalues ## [1] -1+1.414214i -1-1.414214i library(ggplot2) library(tidyverse) library(deSolve) library(gganimate) library(gifski) ### Model specification ERROR &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { de1_dt = c1 * e1 + c2 * e2 de2_dt = d1 * e1 + d2 * e2 return(list(c(de1_dt, de2_dt))) }) } ### Model parameters times &lt;- seq(0, 10, by = 0.0001) state &lt;- c(e1 = 1, e2 = 1) parms &lt;- c(c1 = -1, c2 = 1, d1 = -2, d2 = -1) ### Model application error &lt;- ode(func = ERROR, times = times, y = state, parms = parms) tail(error) plot(e1 ~ e2, error, type = &quot;l&quot;) ## time e1 e2 ## [99996,] 9.9995 3.192479e-05 -6.443030e-05 ## [99997,] 9.9996 3.191516e-05 -6.443024e-05 ## [99998,] 9.9997 3.190552e-05 -6.443018e-05 ## [99999,] 9.9998 3.189589e-05 -6.443011e-05 ## [100000,] 9.9999 3.188626e-05 -6.443005e-05 ## [100001,] 10.0000 3.187663e-05 -6.442998e-05 "],["week-11---lotka-volterra-model-of-predator-prey-interactions-and-time-scale-separation.html", "Week 11 - Lotka-Volterra model of predator-prey interactions and time-scale separation", " Week 11 - Lotka-Volterra model of predator-prey interactions and time-scale separation Part 1: analyzing the classic Lotka-Volterra predator-prey model In this lab, we are going to analyze the classic Lotka-Volterra predator-prey model: \\[\\begin{align*} \\frac {dN}{dt} &amp;= rN-aNP\\\\ \\frac {dP}{dt} &amp;= eaNP-dP \\end{align*}\\] The non-trivial equilibrium of this system is \\(E_c = (N = \\frac{d}{ea}, P = \\frac{r}{a})\\). We simulate the model using the following parameter set (\\(N_0\\) = 10, \\(P_0\\) = 2, \\(r\\) = 1.0, \\(a\\) = 0.1, \\(e\\) = 0.8, \\(d\\) = 0.5) and plot the population trajectories of predator and prey over time. We also show their population dynamics in the state-space diagram. What will happen if you add a perturbation to the system (i.e., change the initial conditions)? Try out different values of \\(N_0\\) and \\(P_0\\) and visualize the differences in the state-space diagram by yourselve. library(deSolve) ### Model specification LV_predation_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N - a*N*P dP_dt = e*a*N*P - d*P return(list(c(dN_dt, dP_dt))) }) } ### Model parameters times &lt;- seq(0, 100, by = 0.01) state &lt;- c(N = 10, P = 2) parms &lt;- c(r = 1.0, a = 0.1, e = 0.8, d = 0.5) ### Model application pop_size &lt;- ode(func = LV_predation_model, times = times, y = state, parms = parms) ### Visualization -- population dynamics plot(c(0, max(times)), c(0, max(pop_size[, c(&quot;N&quot;, &quot;P&quot;)] + 10)), type = &quot;n&quot;, xlab = &quot;time&quot;, ylab = &quot;population size&quot;) lines(N ~ time, data = pop_size, col = &quot;blue&quot;) # dynamics of N lines(P ~ time, data = pop_size, col = &quot;red&quot;) # dynamics of P abline(h = parms[4]/(parms[3] * parms[2]), col = &quot;blue&quot;, lty = 2) # equilibrium of N abline(h = parms[1] / parms[2], col = &quot;red&quot;, lty = 2) # equilibrium of P legend(&quot;topright&quot;, legend = c(&quot;N&quot;, &quot;P&quot;), col = c(&quot;blue&quot;, &quot;red&quot;), lty = 1) ### Visualization -- state-space diagram plot(N ~ P, data = pop_size, type = &quot;l&quot;) points(parms[4]/(parms[3] * parms[2]), parms[1] / parms[2]) # equilibrium What is the relationship between the long-term average of the cycle and the originally-expected equilibrium? To calculate long-term average, we need to find out the period of the cycle and then calculate the average population size within a period. The period of the cycle may be derived from the distance between peaks in the dynamics shown above, or by some algorithms, e.g. pracma::findpeaks. Part 2: Time-scale separation Time-scale separation is a useful technique to reduce the dimension of the model system, where some state variables are assumed to operate at a much shorter time scale (i.e., fast variables) compared with the others (i.e., slow variables). The fast variables will be attracted rapidly to their new equilibrium in response to a slight change in the slow variables, such that the slow variables can be viewed as “constants” from the perspective of fast variables (and the fast variable will always be at its quasi-equilibrium from the perspective of the slow variable). Here, we are going to use the Lotka-Volterra model with logistic prey growth to demonstrate the time-scale separation technique: \\[\\begin{align*} \\frac {dN}{dt} &amp;= rN(1-\\frac{N}{K})-aNP\\\\ \\frac {dP}{dt} &amp;= eaNP-dP \\end{align*}\\] The ZNGIs of \\(N\\) are \\(N = 0\\) and \\(r(1-\\frac{N}{K}) - aP = 0\\) and the ZNGIs of \\(P\\) are \\(P = 0\\) and \\(eaN = d\\) in this model. We treat prey as a fast variable and predator as a slow variable. First, we find the quasi-equilibrium \\(\\widehat{N}\\) of prey by setting the prey equation to zero: \\[\\widehat{N} = K(1-\\frac{aP}{r})\\] And then we plug \\(\\widehat{N}\\) into predator equation: \\[\\frac {dP}{dt} = (eaK-d)P(1-\\frac{eaK(\\frac{a}{r})}{eaK-d}P)\\] One simple way to achieve time-scale separation in this model is to increase the prey growth rate so that prey will grow much faster than predator, mimicking the shorter generation time of prey relative to that of predator. library(deSolve) Prey_logistic_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N*(1-(N/K))-a*N*P dP_dt = e*a*N*P-d*P return(list(c(dN_dt, dP_dt))) }) } times &lt;- seq(0, 100, by = 0.01) state &lt;- c(N = 40, P = 20) parms &lt;- c(r = 40, K = 60, a = 0.1, e = 0.1, d = 0.5) # r is chosen to be sufficiently large for time-scale separation pop_size &lt;- ode(func = Prey_logistic_model, times = times, y = state, parms = parms) Under time-scale separation, population of prey rapidly becomes stable and predator exhibits a logistic growth. We show these by the trajectories of \\(P\\) and \\(N\\) over time. # population trajectories plot(c(0, max(times)), c(0, max(pop_size[, c(&quot;N&quot;, &quot;P&quot;)] + 10)), type = &quot;n&quot;, xlab = &quot;time&quot;, ylab = &quot;population size&quot;) lines(N ~ time, data = pop_size, col = &quot;blue&quot;) # dynamics of N lines(P ~ time, data = pop_size, col = &quot;red&quot;) # dynamics of P legend(&quot;topright&quot;, legend = c(&quot;N&quot;, &quot;P&quot;), col = c(&quot;blue&quot;, &quot;red&quot;), lty = 1) Since \\(N\\) is a fast variable, it will immediately achieve the its ZNGI on the state-space diagram. # state-space diagram plot(c(0, max(pop_size[, &quot;N&quot;])), c(0, max(pop_size[, &quot;P&quot;])), type = &quot;n&quot;, xlab = &quot;N&quot;, ylab = &quot;P&quot;) abline(v = 0, col = &quot;blue&quot;) # ZNGI of N abline(a = parms[1]/parms[3], b = -parms[1]/(parms[3]*parms[2]), col = &quot;blue&quot;) # ZNGI of N abline(h = 0, col = &quot;red&quot;) # ZNGI of P abline(v = parms[5]/(parms[4]*parms[3]), col = &quot;red&quot;) # ZNGI of P points(P ~ N, data = pop_size, col = &quot;gray&quot;) Play with the growth rate \\(r\\) from small to large values and see how the trajectory of prey and predator moves along the state-space. Shiny app is credit to Gen-Chang Hsu "]]
