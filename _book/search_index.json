[["index.html", "Introduction to Theoretical Ecology Course information", " Introduction to Theoretical Ecology Instructor: Po-Ju Ke \\(~~~~~\\) Teaching Assistant: Hsiang-Chih Lo 2024 Fall at National Taiwan Univeristy Course information Description The development of theory plays an important role in advancing ecology as a scientific field. This three-unit course is for students at the graduate or advanced undergraduate level. The course will cover classic theoretical topics in population and community ecology, staring from single-species dynamics and gradually build up to multispecies models. Emphasis will be on theoretical concepts and corresponding mathematical approaches. This course is designed as a two-hour lecture (written on black board) followed by a one-hour complementary hands-on practice module. In the lecture, we will analyze dynamical models and discuss their theoretical implications. In the practice section, we will use a combination interactive applications and numerical simulations to gain more intuition of the dynamics and behavior of different models. Objective By the end of the course, students are expected to be familiar with the basic building blocks of ecological models, and would be able to formulate and analyze simple models of their own. The hands-on practice component should allow students to link their ecological intuition with the underlying mathematical model, helping them to better understand the primary literature of theoretical ecology. Requirement Students are only expected to have a basic understanding of Calculus (e.g., freshman introductory course) and Ecology. It’s OK if you’re not familiar with calculus as we will provide relevant material for you to review during the first week. Format Tuesday 6,7,8 (1:20 pm ~ 4:20 pm) at 共207 Grading The final grade consists of: Assignment problem sets (60%) Midterm exam (15%) Final exam (15%) Course participation (10%) Course materials We will use a combination of textbooks of theoretical ecology. Textbook chapters and additional reading materials (listed in the course outline) will be provided. (see Syllabus for more details). Below are the textbook references: A Primer of Ecology (4th edition). Nicholas Gotelli, 2008. An Illustrated Guide to Theoretical Ecology. Ted Case, 2000. A Biologist’s Guide to Mathematical Modeling in Ecology and Evolution. Sarah Otto &amp; Troy Day, 2011. Mathematical Ecology of Populations and Ecosystems. John Pastor, 2008. Nonlinear Dynamics and Choas. Steven Strogatz, 2000. Contacts Instructor: Po-Ju Ke Office: Life Science Building R635 Email: pojuke@ntu.edu.tw Office hours: by appointment Teaching assistant: Hsiang-Chih Lo Office: Life Science Building R635 Email: r12b44009@ntu.edu.tw Office hours: by appointment "],["syllabus.html", "Syllabus", " Syllabus Date Lecture topic Lab Readings Week 1 9/3 Introduction: what is theoretical ecology? - Grainger et al., 2021 Week 2 9/10 Exponential population growth Solving exponential growth equation using “deSolve” &amp; Visualization Gotelli [Ch.1], Case[Ch.1] Week 3 9/17 No class (National holiday) - - Week 4 9/24 Logistic population growth and stability analysis Shinny App for logistic population growth Gotelli [Ch.2], Case[Ch.5], Otto &amp; Day[Ch.5] Week 5 10/1 Age-structured population models Age-structured population model Gotelli [Ch.3], Case[Ch.3] Week 6 10/8 Metapopulations and patch occupancy models Metapopulations and patch occupancy models Gotelli [Ch.4], Case[Ch.16] Week 7 10/15 Harvesting and bifurcation Alternative stable state diagram Pastor [Ch. 7], Strogatz [Ch. 3] Week 8 10/22 Lotka-Volterra model of competition: graphical analysis Lotka-Volterra competition model - Population dynamics Gotelli [Ch.5], Case[Ch.14] Week 9 10/29 Midterm exam - - Week 10 11/5 Lotka-Volterra model of competition: invasion analysis and linear stability analysis Lotka-Volterra competition model - Visualization of dynamics with complex eigenvalues Otto &amp; Day [Ch.8], Broekman et al., 2019 Week 11 11/12 Predator-prey interactions (I) Lotka-Volterra model of predator-prey interactions and time-scale separation Gotelli [Ch.6], Case[Ch.12, 13] Week 12 11/19 Predator-prey interactions (II) + Discussion on May (1972) Rosenzweig-MacArthur predator-prey model and May’s complexity-stability relationship Gotelli [Ch.6], Case[Ch.12, 13], May., 1972 Week 13 11/26 Mechanistic models for consumer-resource dynamics Parameter space for apparent competition model Tilman., 1980, Armstrong &amp; McGehee., 1980 Week 14 12/3 Multispecies models of predation: apparent competition Resource competition Holt., 1977 Week 15 12/10 Research applcations: plant-soil feedback as an example - - Week 16 12/17 Final exam - - "],["week-2---exponential-population-growth.html", "Week 2 - Exponential population growth", " Week 2 - Exponential population growth In part 1, we will solve the differential equation for exponential population growth and visualize how the population sizes change over time. Part 1 - Numerical solution using the package deSolve Two main phases: Model specification: specify the structure of differential equation model Model application: set the time steps, initial population size and model parameters (e.g., intrinsic population growth rate \\(r\\)), and then solve the equation model p span#aaa:before { content: \"(1) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } p span#bbb:before { content: \"(2) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } d-article table.lightable-paper { margin-bottom: 0px; } Consider the model \\[ \\frac{dN}{dt} = rN \\] where \\(N\\) is population size and \\(r\\) is the intrinsic growth rate. ###### part 1 ###### # install.packages(&quot;deSolve&quot;) library(deSolve) ### (1) Model specification exponential_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N # Exponential growth equation return(list(c(dN_dt))) # Return the results }) } Set the time steps, initial population size and model parameters. ### (2) Model application times &lt;- seq(0, 10, by = 0.1) # Time steps to integrate over state &lt;- c(N = 10) # Initial population size parms &lt;- c(r = 1.5) # Intrinsic growth rate Solve the equation by ode() numerically. # Run the ode solver pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # Take a look at the results head(pop_size) ## time N ## [1,] 0.0 10.00000 ## [2,] 0.1 11.61834 ## [3,] 0.2 13.49860 ## [4,] 0.3 15.68313 ## [5,] 0.4 18.22120 ## [6,] 0.5 21.17002 Visualization plot(N ~ time, data = pop_size) Compare simulation result with analytic solution, which is \\[ N(t) = N_0\\exp\\{rt\\} \\] par(mfrow = c(1,2)) plot(N ~ time, data = pop_size) # Plot simulation data curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # Adding analytic solution plot(N ~ time, data = pop_size, log = &quot;y&quot;) # Plot logged simulation data curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # Adding analytic solution Part 2 - Comparing different ode solvers and different time intervals In default of ode(), the equations are solved by LSODA method. We can change the method by modifying the argument method in ode(). ###### part 2 ###### # Original setting times &lt;- seq(0, 10, by = 0.1) # Time steps to integrate over state &lt;- c(N = 10) # Initial population size parms &lt;- c(r = 1.5) # Intrinsic growth rate # Default: LSODA pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # Euler&#39;s method pop_size_1 &lt;- ode(func = exponential_model, times = times, y = state, parms = parms, method = &quot;euler&quot;) # Compare different method par(mfrow = c(1,2)) plot(N ~ time, data = pop_size, main = &quot;LSODA&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_1, main = &quot;Euler&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve # Different time intervals times_1 &lt;- seq(0, 10, by = 1) # time steps to integrate over times_2 &lt;- seq(0, 10, by = 0.1) # time steps to integrate over times_3 &lt;- seq(0, 10, by = 0.01) # time steps to integrate over # Euler&#39;s method pop_size_1 &lt;- ode(func = exponential_model, times = times_1, y = state, parms = parms, method = &quot;euler&quot;) pop_size_2 &lt;- ode(func = exponential_model, times = times_2, y = state, parms = parms, method = &quot;euler&quot;) pop_size_3 &lt;- ode(func = exponential_model, times = times_3, y = state, parms = parms, method = &quot;euler&quot;) # Compare different time intervals par(mfrow = c(1,3)) plot(N ~ time, data = pop_size_1, main = &quot;Time intervals = 1&quot;) curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_2, main = &quot;Time intervals = 0.1&quot;) curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_3, main = &quot;Time intervals = 0.01&quot;) curve(state[1]*exp(parms[1]*x), col = &quot;red&quot;, add = T) # correct curve Part 3 - Solving exponential growth model with fluctuating growth rate Consider the model \\[ \\frac{dN}{dt} = r(t)N \\ \\text{, } r(t) = \\overline{r} + \\sigma\\sin(\\omega t) \\] where \\(\\overline{r}\\) and \\(\\omega\\) are constants. The analytic solution of the ode model is \\[ N(t) = N_0\\exp\\{\\overline{r}t - \\frac{\\sigma}{\\omega}[\\cos(\\omega t) - 1]\\} \\] ###### part 3 ###### ### Model specification exponential_model_fluc &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = (r_bar + sigma*sin(omega*times))*N # exponential growth equation return(list(c(dN_dt))) # return the results }) } ### Parameters times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r_bar = 1.5, sigma = 5, omega = 2*pi) # intrinsic growth rate Plot \\(r(t)\\) ### Fluctuating growth rate r = parms[1] + parms[2]*sin(parms[3]*times) plot(r ~ times, type = &quot;l&quot;) ### Solving model pop_size &lt;- ode(func = exponential_model_fluc, times = times, y = state, parms = parms) ### Plotting plot(N ~ times, data = pop_size) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T, col = &quot;red&quot;) # correct curve plot(N ~ times, data = pop_size, log = &quot;y&quot;) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T, col = &quot;red&quot;) # correct curve Adjust \\(\\overline{r}\\) ### Parameters times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r_bar = 0.1, sigma = 5, omega = 2*pi) # intrinsic growth rate ### Fluctuating growth rate r = parms[1] + parms[2]*sin(parms[3]*times) plot(r ~ times, type = &quot;l&quot;) ### Solving model pop_size &lt;- ode(func = exponential_model_fluc, times = times, y = state, parms = parms) ### Plotting plot(N ~ times, data = pop_size) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T, col = &quot;red&quot;) # correct curve "],["week-4---logistic-population-growth-and-stability-analysis.html", "Week 4 - Logistic population growth and stability analysis", " Week 4 - Logistic population growth and stability analysis Credit to Gen-Chang Hsu Extra materials - Modeling discrete logistic models using for loops Model: \\[ N_{t+1} = N_t(1+r(1-\\frac{N_t}{K})) \\] ### (1) Define the discrete logistic growth equation log_fun &lt;- function(r, N, K){N + r*N*(1-N/K)} You may modify \\(r\\) to see the change in stability of equilibrium \\(K\\). ### (2) Set the parameters r &lt;- 1.8 K &lt;- 500 N0 &lt;- 10 time &lt;- 100 ### (3) Use for loop to iterate over the time sequence pop_size &lt;- data.frame(times = 1:time) pop_size$N[1] &lt;- N0 head(pop_size) ## times N ## 1 1 10 ## 2 2 10 ## 3 3 10 ## 4 4 10 ## 5 5 10 ## 6 6 10 for(i in 2:time){ pop_size$N[i] &lt;- log_fun(r = r, N = pop_size$N[i - 1], K = K) } head(pop_size) ## times N ## 1 1 10.00000 ## 2 2 27.64000 ## 3 3 74.64171 ## 4 4 188.93980 ## 5 5 400.51775 ## 6 6 543.95762 ### (4) Population trajectory plot(N ~ times, data = pop_size, type = &quot;l&quot;) abline(h = K, col = &quot;red&quot;) points(N ~ times, data = pop_size) Here is a shiny app for the discrete logistic growth model. Credit to Gen-Chang Hsu "],["week-5---metapopulations-and-patch-occupancy-models.html", "Week 5 - Metapopulations and patch occupancy models", " Week 5 - Metapopulations and patch occupancy models     Plants can condition nearby soil microbial communities, which will in turn influence the performance of subsequent colonizing plants. The soil beneath plant communities are therefore a mosaic with different cultivation histories. Po-Ju wants to understand how plant demographic rates (i.e., colonization and mortality rate) and microbial dynamics (i.e., the conditioning and decay rate of microbial communities) affect the percentage of different soil types in natural forests. As a starting point, Po-Ju builds a one-species patch occupancy model to track the dynamics of different types of plant-soil combination.     In this model, he characterizes sites by their plant-soil microbe state, using the notation \\(P_{ij}\\) to indicate sites that are now occupied by plant species \\(i\\) but have soil microbes state \\(j\\). Here, as a single species model, \\(i\\) can be 0 or \\(A\\), representing uncolonized sites or sites colonized by plant \\(A\\), respectively. Similarly, \\(j\\) can be 0 or \\(A\\), indicating sites without recent plant conditioning history or sites conditioned by plant \\(A\\), respectively. In summary: \\(P_{00}\\) represents uncolonized and unconditioned sites \\(P_{A0}\\) represents cites colonized by plant \\(A\\) but the soil is yet to be conditioned \\(P_{AA}\\) represents plant \\(A\\) colonizing a site with plant-\\(A\\)-specific microbial community \\(P_{0A}\\) represents sites that are currently unoccupied but have soil microbes that were associated with plant \\(A\\) At the landscape scale, \\(P_{ij}\\) represents the proportion of sites belonging to a particular plant-soil microbe state, and its dynamics, \\(\\frac {dP_{ij}}{dt}\\), summarizes the processes of plant colonization and death. The transitions between different plant-soil microbe states can be described by the following figure. Here, \\(P_{00}\\) can be colonized by plant \\(A\\) when propagules arrive (per capita rate \\(r_{A}\\)), transitioning the state from \\(P_{00}\\) to \\(P_{A0}\\). Plants may die, with rate \\(m_{A}\\), before conditioning the soil (i.e., transition from \\(P_{A0}\\) back to \\(P_{00}\\)), or may successfully condition the soil with rate \\(c_{A}\\) (i.e., transition from \\(P_{A0}\\) to \\(P_{AA}\\)). After plants within the state \\(P_{AA}\\) die, a site with microbial legacy is left behind, denoted as \\(P_{0A}\\). These empty sites can be recolonized (i.e., transition from \\(P_{0A}\\) back to \\(P_{AA}\\)) with rates affected by the microbial legacy effect, \\(\\alpha\\). Finally, the microbial community within the soil may decay to unconditioned state with rate \\(d_{A}\\), transitioning the state from \\(P_{0A}\\) to \\(P_{00}\\).     In this lab, we are going to model the dynamics of this plant-soil system. We will start by converting the flow diagram into a set of differential equations and then solve them numerically using the package deSolve. library(deSolve) library(ggplot2) library(tidyr) ### Model specification PSF = function(Time, State, Pars){ with(as.list(c(State, Pars)),{ dP00_dt = - rA * (PA0 + PAA) * P00 + mA * PA0 + dA * P0A dPA0_dt = rA * (PA0 + PAA) * P00 - cA * PA0 - mA * PA0 dPAA_dt = cA * PA0 + alpha * rA * (PA0 + PAA) * P0A - mA * PAA dP0A_dt = mA * PAA - alpha * rA * (PA0 + PAA) * P0A - dA * P0A return(list(c(dP00_dt, dPA0_dt, dPAA_dt, dP0A_dt))) }) } #### Set simulation parameters with the &#39;quick simulation parameters&#39; pars = c(rA = 0.5, mA = 0.1, cA = 0.5, dA = 0.4, alpha = 0.3) #### Set initial condition and time steps times = seq(0, 100, by = 0.1) ini = c(P00 = 0.75, PA0 = 0.1, PAA = 0.05, P0A = 0.1) #### Run the simulation pop_size = ode(func = PSF, y = ini, parms = pars, times = times) #### Check if simulations reached stable point tail(pop_size) ## time P00 PA0 PAA P0A ## [996,] 99.5 0.1634825 0.09738004 0.6174124 0.1217251 ## [997,] 99.6 0.1634825 0.09738004 0.6174124 0.1217251 ## [998,] 99.7 0.1634825 0.09738004 0.6174124 0.1217251 ## [999,] 99.8 0.1634825 0.09738004 0.6174124 0.1217251 ## [1000,] 99.9 0.1634825 0.09738004 0.6174124 0.1217251 ## [1001,] 100.0 0.1634825 0.09738004 0.6174124 0.1217251 rowSums(tail(pop_size[, -1])) ## [996,] [997,] [998,] [999,] [1000,] [1001,] ## 1 1 1 1 1 1     After checking the outcomes of our numerical simulation, we can visualize the system dynamics through time, using any method you prefer. The following are some examples: Visualization of the system dynamics through time using function matplot. #### Plot (matplot) matplot(x = pop_size[, 1], y = pop_size[, 2:5], type = &quot;l&quot;) Visualization of the system dynamics through time using base R, with axis labels and given line colors. #### Plot (base R) plot(x = range(times), y = c(0,1), type = &quot;n&quot;, xlab = &quot;Time&quot;, ylab = &quot;Proportion&quot;) lines(P00 ~ time, data = pop_size, col = &quot;black&quot;) lines(PA0 ~ time, data = pop_size, col = &quot;blue&quot;) lines(PAA ~ time, data = pop_size, col = &quot;purple&quot;) lines(P0A ~ time, data = pop_size, col = &quot;red&quot;) legend(&quot;topleft&quot;, legend = c(&quot;P00&quot;, &quot;PA0&quot;, &quot;PAA&quot;, &quot;P0A&quot;), col = c(&quot;black&quot;, &quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;), lty = 1, bty = &quot;n&quot;) Data organization using package tidyverse and visualization of the system dynamics through time using package ggplot2. ### ggplot course website version pop_size %&gt;% as.data.frame() %&gt;% gather(key = &quot;Patch&quot;, value = &quot;Proportion&quot;, -time) %&gt;% ggplot(aes(x = time, y = Proportion, color = Patch)) + geom_line(linewidth = 1.5)     Now we see that the system would eventually be stable, we can jump through the time series and directly take the final equilibrium point (assuming the selected simulation length works for different parameter values). Our next step is to modify the target parameter related to our research question and study their resulting outcome. For example, we want to see how the final fate of this system would change under different decay rates of the conditioned microbial effect (i.e., d_{A}, the transitioning from P_{0A} to uncolonized and unconditioned soil P_{00}). We can efficiently vary the target parameter using a for-loop to run the simulation under different decay rates. Using for loop to run the simulation under different decay rates (\\(d_{A}\\)). ### For-loop over different parameter values ### Parameter range and saving space setup dA_seq &lt;- seq(from = 0.1, to = 0.8, by = 0.1) Data &lt;- as.data.frame(matrix(0, nrow = length(dA_seq), ncol = 6)) names(Data) &lt;- c(&quot;dA&quot;, &quot;time&quot;, &quot;P00&quot;, &quot;PA0&quot;, &quot;PAA&quot;, &quot;P0A&quot;) Data[, 1] &lt;- dA_seq ### Use for loop to change the parameter every time for(i in 1:length(dA_seq)){ # Set simulation parameters pars_new &lt;- c(rA = 0.5, mA = 0.1, cA = 0.5, dA = dA_seq[i], alpha = 0.3) # Simulate pop_size_new &lt;- ode(func = PSF, y = ini, parms = pars_new, times = times) # Save results Data[i, c(2:6)] &lt;- pop_size_new[length(times), ] } Visualization of the stable state under different decay rates (\\(d_{A}\\)) using base R, with axis labels and given line colors. Does the pattern match your intuition? ### Plot resulting equilibrium against different dA plot(x = range(dA_seq), y = c(0,1), type = &quot;n&quot;, xlab = &quot;Decay rate of conditioned soil&quot;, ylab = &quot;Equilibrium proportion&quot;) lines(P00 ~ dA, data = Data, col = &quot;black&quot;) lines(PA0 ~ dA, data = Data, col = &quot;blue&quot;) lines(PAA ~ dA, data = Data, col = &quot;purple&quot;) lines(P0A ~ dA, data = Data, col = &quot;red&quot;) legend(&quot;topleft&quot;, legend = c(&quot;P00&quot;, &quot;PA0&quot;, &quot;PAA&quot;, &quot;P0A&quot;), col = c(&quot;black&quot;, &quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;), lty = 1, bty = &quot;n&quot;) Visualization of the stable state under different decay rates (\\(d_{A}\\)) using package ggplot2. ### ggplot course website version Data %&gt;% as.data.frame() %&gt;% gather(key = &quot;Patch&quot;, value = &quot;Proportion&quot;,-dA, -time) %&gt;% ggplot(aes(x = dA, y = Proportion, color = Patch)) + geom_line(linewidth = 1.5) "],["week-6---harvesting-and-bifurcation.html", "Week 6 - Harvesting and bifurcation", " Week 6 - Harvesting and bifurcation In this lab section, we’re going to analyze the budworm population dynamic model from Ludwig et al., 1978. Part 1 - Stability of the budworm model In part 1 we’re going to visualize the stability of the budworm model, by plotting the differential equation. We will plot the the differential equation with different initial, which we will see that the number and stability of equilibrium changes when parameter changes. \\[ \\dfrac{dN}{dt} = rN(1 - \\dfrac{N}{K}) - \\dfrac{HN^2}{A^2 + N^2} \\] #### Plotting the functional form for different parameters #### Parameter setting r &lt;- 0.055; K &lt;- 10; H &lt;- 0.1; A &lt;- 1 #### Visualize the whole dN/dt with different H N.vec &lt;- seq(from = 0, to = 10, length = 500) H.breaks &lt;- c(0.05, 0.12, 0.20) dat &lt;- outer(X = N.vec, Y = H.breaks, function(N, H){r * N * (1 - N / K) - (H * N^2 / (A^2 + N^2))}) matplot(x = N.vec, y = dat, type = &quot;l&quot;, xlab = &quot;N&quot;, ylab = &quot;dN/dt&quot;, col = &quot;blue&quot;, lwd = 2, las = 1) abline(h = 0) legend(&quot;bottomleft&quot;, legend = H.breaks, title = &quot;H&quot;, col = &quot;blue&quot;, lty=1:3, lwd = 2) Second, we’re going to plot \\(harvest\\) rate against \\(N\\) with separate components of \\(dN/Ndt\\), which the blue line is \\[ \\dfrac{HN}{A^2 + N^2} \\] with different \\(H\\), the red line is, \\[ r(1 - \\dfrac{N}{K}) \\] and the points that blue line and red line crosses are the equilibrium points. #### Visualize separate components of dN/Ndt with different H N.vec &lt;- seq(from = 0, to = 10, length = 500) H.breaks &lt;- c(0.05, 0.12, 0.20) dat.growth &lt;- outer(X = N.vec, Y = H.breaks, function(N, H){H * N / (A^2 + N^2)}) # Note notation change matplot(x = N.vec, y = dat.growth, type = &quot;l&quot;, ylim = c(0, 0.10), las = 1, xlab = &quot;N&quot;, ylab = &quot;harvest rate&quot;, col = &quot;blue&quot;, lwd = 2) curve(r * (1 - x/K), add = T, col = &quot;red&quot;, lwd = 2) # Just curve since its the same line, and note variable notation change abline(h = 0) legend(&quot;topright&quot;, legend = H.breaks, title = &quot;H&quot;, col = &quot;blue&quot;, lty=1:3, lwd = 2) Part 2 - Use rootSolve function gradient and uniroot.all, to solve stability of budworm model #### Stability of the budworm model, as a function of its parameters #### Using &quot;rootSolve&quot; function &quot;gradient&quot; and &quot;uniroot.all&quot; #### Works best for simple models and those with known solutions ######################################################################################################################## library(rootSolve) #### Parameter setting r &lt;- 0.055; K &lt;- 10; H &lt;- 0.1; A &lt;- 1 #### Spruce budworm model for rootSolve Budworm &lt;- function(N, H = 0.1){ r * N * (1 - N / K) - (H * N^2 / (A^2 + N^2)) } #### Function of root stability Stability &lt;- function(H.value = 0.1){ equilibrium &lt;- uniroot.all(f = Budworm, interval = c(0, K), H = H.value) # finds all roots lambda &lt;- vector(mode = &quot;numeric&quot;, length = length(equilibrium)) for(i in 1:length(equilibrium)){ lambda[i] &lt;- sign(gradient(f = Budworm, x = equilibrium[i], H = H.value)) } return(list(Equilibrium = equilibrium, Lambda = lambda)) } #### Bifurcation diagram for H H.vec &lt;- seq(0.001, 0.3, by = 0.0001) ## Create plotting frame plot(0, xlim = range(H.vec), ylim = c(0, 10), type = &quot;n&quot;, las = 1, xlab = &quot;H&quot;, ylab = &quot;Equilibrium density, N*&quot;, main = &quot;Budworm model bifurcation along H&quot;) legend(&quot;topright&quot;, pch = 15, pt.cex = 2, c(&quot;stable&quot;, &quot;unstable&quot;), col = c(&quot;darkblue&quot;, &quot;lightblue&quot;)) ## Calculate number of roots and stability across range of H for(H in H.vec){ temp &lt;- Stability(H.value = H) points(x = rep(H, length(temp$Equilibrium)), y = temp$Equilibrium, pch = 15, col = ifelse(temp$Lambda == -1, &quot;darkblue&quot;, &quot;lightblue&quot;)) } Take a look a this website if you’re interested in more details of bifurcation. Extra materials Using deSolve function ode to brute-force stable solution Here we’re going to use deSolve to solve the budworm model, #### Budworm model for deSolve library(deSolve) BudwormODE &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r * N * (1 - N / K) - (H * N^2 / (A^2 + N^2)) return(list(c(dN_dt))) }) } ### Parameters setting times &lt;- seq(0, 5000, by = 100) state &lt;- c(N = 10) #### Bifurcation diagram for H -- the forward branch ### Set first forward simulation and saving space H.vec.forward &lt;- seq(0.001, 0.3, by = 0.001) parms &lt;- c(H = H.vec.forward[1], K = 10, r = 0.055, A = 1) temp &lt;- ode(func = BudwormODE, times = times, y = state, parms = parms) forward &lt;- matrix(rep(unname(c(H.vec.forward[1], temp[length(times), 2])), length(H.vec.forward)), nrow = length(H.vec.forward), ncol = 2, byrow = T) ## Run across forward vector, using previous step equilibrium as new initial state for(i in 2:length(H.vec.forward)){ state &lt;- c(N = forward[i-1, 2]) parms &lt;- c(H = H.vec.forward[i], K = 10, r = 0.055, A = 1) temp &lt;- ode(func = BudwormODE, times = times, y = state, parms = parms) forward[i, ] = unname(c(H.vec.forward[i], temp[length(times), 2])) } #### Bifurcation diagram for H -- the backward branch ## Set first backward simulation and saving space H.vec.backward &lt;- rev(H.vec.forward) parms &lt;- c(H = H.vec.backward[1], K = 10, r = 0.055, A = 1) temp &lt;- ode(func = BudwormODE, times = times, y = state, parms = parms) backward &lt;- matrix(rep(unname(c(H.vec.backward[1], temp[length(times), 2])), length(H.vec.backward)), nrow = length(H.vec.backward), ncol = 2, byrow = T) ## Run across backward vector, using previous step equilibrium as new initial state for(i in 2:length(H.vec.backward)){ state &lt;- c(N = backward[i-1, 2] + 0.001) #Remember to add a small perturbation on initial parms &lt;- c(H = H.vec.backward[i], K = 10, r = 0.055, A = 1) temp &lt;- ode(func = BudwormODE, times = times, y = state, parms = parms) backward[i, ] = unname(c(H.vec.backward[i], temp[length(times), 2])) } #### Plot both forward and backward branch plot(forward[, 1], forward[, 2], xlim = range(H.vec.forward), ylim = c(0, 10), las = 1, pch = 1, col = &quot;darkblue&quot;, cex = 1.6, xlab = &quot;H&quot;, ylab = &quot;Equilibrium density, N*&quot;, main = &quot;Budworm model bifurcation along H&quot;) points(backward[, 1], backward[, 2], pch = 16, col = &quot;lightblue&quot;) legend(&quot;topright&quot;, pch = c(1, 16), pt.cex = 1.5, c(&quot;forward&quot;, &quot;backward&quot;), col = c(&quot;darkblue&quot;, &quot;lightblue&quot;)) "]]
