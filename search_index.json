[["index.html", "Introduction to Theoretical Ecology Course information", " Introduction to Theoretical Ecology Instructor: Po-Ju Ke \\(~~~~~\\) Teaching Assistant: Hsiang-Chih Lo 2024 Fall at National Taiwan Univeristy Course information Description The development of theory plays an important role in advancing ecology as a scientific field. This three-unit course is for students at the graduate or advanced undergraduate level. The course will cover classic theoretical topics in population and community ecology, staring from single-species dynamics and gradually build up to multispecies models. Emphasis will be on theoretical concepts and corresponding mathematical approaches. This course is designed as a two-hour lecture (written on black board) followed by a one-hour complementary hands-on practice module. In the lecture, we will analyze dynamical models and discuss their theoretical implications. In the practice section, we will use a combination interactive applications and numerical simulations to gain more intuition of the dynamics and behavior of different models. Objective By the end of the course, students are expected to be familiar with the basic building blocks of ecological models, and would be able to formulate and analyze simple models of their own. The hands-on practice component should allow students to link their ecological intuition with the underlying mathematical model, helping them to better understand the primary literature of theoretical ecology. Requirement Students are only expected to have a basic understanding of Calculus (e.g., freshman introductory course) and Ecology. It’s OK if you’re not familiar with calculus as we will provide relevant material for you to review during the first week. Format Tuesday 6,7,8 (1:20 pm ~ 4:20 pm) at 共207 Grading The final grade consists of: Assignment problem sets (60%) Midterm exam (15%) Final exam (15%) Course participation (10%) Course materials We will use a combination of textbooks of theoretical ecology. Textbook chapters and additional reading materials (listed in the course outline) will be provided. (see Syllabus for more details). Below are the textbook references: A Primer of Ecology (4th edition). Nicholas Gotelli, 2008. An Illustrated Guide to Theoretical Ecology. Ted Case, 2000. A Biologist’s Guide to Mathematical Modeling in Ecology and Evolution. Sarah Otto &amp; Troy Day, 2011. Mathematical Ecology of Populations and Ecosystems. John Pastor, 2008. Nonlinear Dynamics and Choas. Steven Strogatz, 2000. Contacts Instructor: Po-Ju Ke Office: Life Science Building R635 Email: pojuke@ntu.edu.tw Office hours: by appointment Teaching assistant: Hsiang-Chih Lo Office: Life Science Building R635 Email: r12b44009@ntu.edu.tw Office hours: by appointment "],["syllabus.html", "Syllabus", " Syllabus Date Lecture topic Lab Readings Week 1 9/3 Introduction: what is theoretical ecology? - Grainger et al., 2021 Week 2 9/10 Exponential population growth Solving exponential growth equation using “deSolve” &amp; Visualization Gotelli [Ch.1], Case[Ch.1] Week 3 9/17 No class (National holiday) - - Week 4 9/24 Logistic population growth and stability analysis Shinny App for logistic population growth Gotelli [Ch.2], Case[Ch.5], Otto &amp; Day[Ch.5] Week 5 10/1 Age-structured population models Age-structured population model Gotelli [Ch.3], Case[Ch.3] Week 6 10/8 Metapopulations and patch occupancy models Metapopulations and patch occupancy models Gotelli [Ch.4], Case[Ch.16] Week 7 10/15 Harvesting and bifurcation Alternative stable state diagram Pastor [Ch. 7], Strogatz [Ch. 3] Week 8 10/22 Lotka-Volterra model of competition: graphical analysis Lotka-Volterra competition model - Population dynamics Gotelli [Ch.5], Case[Ch.14] Week 9 10/29 Midterm exam - - Week 10 11/5 Lotka-Volterra model of competition: invasion analysis and linear stability analysis Lotka-Volterra competition model - Visualization of dynamics with complex eigenvalues Otto &amp; Day [Ch.8], Broekman et al., 2019 Week 11 11/12 Predator-prey interactions (I) Lotka-Volterra model of predator-prey interactions and time-scale separation Gotelli [Ch.6], Case[Ch.12, 13] Week 12 11/19 Predator-prey interactions (II) + Discussion on May (1972) Rosenzweig-MacArthur predator-prey model and May’s complexity-stability relationship Gotelli [Ch.6], Case[Ch.12, 13], May., 1972 Week 13 11/26 Mechanistic models for consumer-resource dynamics Parameter space for apparent competition model Tilman., 1980, Armstrong &amp; McGehee., 1980 Week 14 12/3 Multispecies models of predation: apparent competition Resource competition Holt., 1977 Week 15 12/10 Research applcations: plant-soil feedback as an example - - Week 16 12/17 Final exam - - "],["week-10---lotka-volterra-competition-model---visualization-of-dynamics-with-complex-eigenvalues.html", "Week 10 - Lotka-Volterra competition model - Visualization of dynamics with complex eigenvalues", " Week 10 - Lotka-Volterra competition model - Visualization of dynamics with complex eigenvalues Part 1 - Visualize the Trajectory of 2 Species Population Dynamics In class, we learned that the stability of a nonlinear ODE can be characterized by studying the dynamics of the “displacement for the equilibrium” (\\(\\pmb\\varepsilon\\)), which follows a much simpler linear ODE. If the linear ODE describing the dynamics of the displacement have a stable equilibrium at zero, then this indicates that the original equilibrium of the nonlinear ODE will also be stable. Consider the case where the dynamics of displacements \\(\\pmb\\varepsilon\\) can be described by the following linear ODE: \\[ \\dfrac{d \\vec{\\pmb\\varepsilon}}{d t} = \\mathcal{J}\\vec{\\pmb\\varepsilon} \\] where \\(\\vec{\\pmb\\varepsilon} = (\\varepsilon_1, \\varepsilon_2)^T\\) and \\(\\mathcal{J} = \\begin{pmatrix} -1 &amp; 1\\\\ -2 &amp; -1 \\end{pmatrix}\\). Or, we can write the linear system by two ODEs: \\[\\begin{align*} \\dfrac{d \\varepsilon_1}{d t} &amp;= (-1)\\times \\varepsilon_1 + (1)\\times\\varepsilon_2\\\\ \\dfrac{d \\varepsilon_2}{d t} &amp;= (-2)\\times \\varepsilon_1 + (-1)\\times\\varepsilon_2\\\\ \\end{align*}\\] We can see that this ODE has an equilibrium at zero and the eigenvalues are as follows, which have negative real parts (indicating that it’ll be stable) with a non-zero imaginary part (indicating that it’ll rotate towards the equilibrium, as shown below). eigen(matrix(c( -1, 1, -2, -1), 2, 2, T))$values # eigenvalues ## [1] -1+1.414214i -1-1.414214i library(ggplot2) library(tidyverse) library(deSolve) library(gganimate) library(gifski) ### Model specification ERROR &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { de1_dt = A * e1 + B * e2 de2_dt = C * e1 + D * e2 return(list(c(de1_dt, de2_dt))) }) } ### Imaginary eigenvalue ### Model parameters times &lt;- seq(0, 10, by = 0.0001) state &lt;- c(e1 = 0.1, e2 = 0.1) parms &lt;- c(A = -1, B = 1, C = -2, D = -1) ### Model application error_1 &lt;- ode(func = ERROR, times = times, y = state, parms = parms) plot(e2 ~ e1, error_1, type = &quot;l&quot;) abline(h = 0, lty = 3, col = &quot;red&quot;) abline(v = 0, lty = 3, col = &quot;red&quot;) ### Plot animation p1 &lt;- error_1 %&gt;% as.data.frame() %&gt;% ggplot(aes(x = e1, y = e2)) + geom_point() + geom_vline(xintercept = 0, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + geom_hline(yintercept = 0, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + labs(subtitle = &quot;Time: {round(frame_time, digit = 1)}&quot;) + transition_time(time) + shadow_wake(wake_length = 1) #gif1 &lt;- animate(p1, renderer = gifski_renderer()) #anim_save(filename = &quot;W10_dynamics_error_imaginary.gif&quot;, gif1) Here is another example that has negative real parts (indicating that it’ll be stable) with imaginary part equals to zero (indicating that it will not rotate but directly reaches the equilibrium, as shown below). times &lt;- seq(0, 10, by = 0.0001) state &lt;- c(e1 = 0.1, e2 = 0.1) parms &lt;- c(A = -1, B = 1, C = 0, D = -2) ### Model application error_2 &lt;- ode(func = ERROR, times = times, y = state, parms = parms) plot(e2 ~ e1, error_2, type = &quot;l&quot;) abline(h = 0, lty = 3, col = &quot;red&quot;) abline(v = 0, lty = 3, col = &quot;red&quot;) ### Plot animation p2 &lt;- error_2 %&gt;% as.data.frame() %&gt;% ggplot(aes(x = e1, y = e2)) + geom_point() + geom_vline(xintercept = 0, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + geom_hline(yintercept = 0, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + labs(subtitle = &quot;Time: {round(frame_time, digit = 1)}&quot;) + transition_time(time) + shadow_wake(wake_length = 1) #gif2 &lt;- animate(p2, renderer = gifski_renderer()) #anim_save(filename = &quot;W10_dynamics_error_real.gif&quot;, gif2) Part 2 - Invasion Simulation In the following section, we are looking at how disturbances could affect population dynamics by doing reciprocal invasion simulations. LV_invasion &lt;- function(r1 = 1.0, r2 = 1.0, a11 = 0.05, a21 = 0.01, a22 = 0.05, a12 = 0.01, runtime = 100, invasion = c(50, 75)){ ### Model specification LV &lt;- function(times, state, parms){ with(as.list(c(state, parms)), { dN1_dt = N1 * (r1 - a11 * N1 - a12 * N2) dN2_dt = N2 * (r2 - a22 * N2 - a21 * N1) return(list(c(dN1_dt, dN2_dt))) }) } ### Event function ### N2 invade N1-monoculture eventfun_2invade &lt;- function(times, state, parms){ with(as.list(c(state, parms)), { N1 &lt;- N1 N2 &lt;- N2 + 1 return(c(N1, N2)) }) } ### N1 invade N2-monoculture eventfun_1invade &lt;- function(times, state, parms){ with(as.list(c(state, parms)), { N1 &lt;- N1 + 1 N2 &lt;- N2 return(c(N1, N2)) }) } ### Model parameters times &lt;- seq(0, runtime, by = 0.1) state_1 &lt;- c(N1 = 5.0, N2 = 0.0) state_2 &lt;- c(N1 = 0.0, N2 = 5.0) parms &lt;- c(r1 = r1, r2 = r2, a11 = a11, a21 = a21, a22 = a22, a12 = a12) ### Model application w/ event function ### N2 invade N1-monoculture pop_size_1 &lt;- ode(func = LV, times = times, y = state_1, parms = parms, events = list(func = eventfun_2invade, time = invasion)) ### N1 invade N2-monoculture pop_size_2 &lt;- ode(func = LV, times = times, y = state_2, parms = parms, events = list(func = eventfun_1invade, time = invasion)) ### Data manipulation Data &lt;- as.data.frame(rbind(pop_size_1, pop_size_2)) Data$Scenario &lt;-rep(c(&quot;N2 invade N1-monoculture&quot;, &quot;N1 invade N2-monoculture&quot;), each = length(times)) ### Visualize the population dynamics Data %&gt;% gather(key = &quot;Species&quot;, value = &quot;pop_size&quot;, -c(time, Scenario)) %&gt;% ggplot(aes(x = time, y = pop_size, color = Species)) + geom_line(linewidth = 1.5) + facet_grid(~Scenario) + theme_classic() + theme(legend.position = &quot;bottom&quot;) } Plot the population dynamics under different parameter sets. #### Run mutual invasion tests ### N1 win: N1 can invade &amp; N2 cannot invade LV_invasion(a11 = 0.01, a21 = 0.05, a22 = 0.05, a12 = 0.01) ### N2 win: N1 cannot invade &amp; N2 can invade LV_invasion(a11 = 0.05, a21 = 0.01, a22 = 0.01, a12 = 0.05) ### Coexist: N1 can invade &amp; N2 can invade LV_invasion(a11 = 0.05, a21 = 0.01, a22 = 0.05, a12 = 0.01) ### Priority Effect: N1 cannot invade &amp; N2 cannot invade LV_invasion(a11 = 0.01, a21 = 0.05, a22 = 0.01, a12 = 0.05) "]]
